import pandas as pd
import numpy as np
import pyodbc
import matplotlib.pyplot as plt 
#from scipy.optimize import curve_fit 
# Create a function to model and create data 
#def func(x, a, x0, sigma): 
#    return a*np.exp(-(x-x0)**2/(2*sigma**2)) 

thisTest = "Amino Acids Plasma"
#theseAnalytes = ["Lactic", "Adipic"]
theseAnalytes = ["Proline", "Serine", "Glycine", "Alanine", "Lysine", "Methionine"]
nGraph=0
for thisAnalyte in theseAnalytes:
    cutoff_factor=0.95
    #thisAnalyte = "Glycine"
    print(thisAnalyte)
    thisUpperRange = thisAnalyte+"VeryHigh"
    thisTable = "["+thisTest+" Results]"
    thisNormalRanges = "["+thisTest+" Normal Ranges]"
    conn = pyodbc.connect(r'Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=L:\Database\LabInfoSystem\BGLab_be.accdb;') 
    cursor = conn.cursor()
    #sql_query = pd.read_sql_query ('SELECT '+thisAnalyte+'  FROM '+thisTable+';', conn)
    #print('Dataframe sql_query, columns='+thisAnalyte+'.')
    #df = pd.DataFrame(sql_query, columns = [thisAnalyte]) #,'Histidine'])
    #df=df.dropna()
    #print(df)

    MySQL = 'SELECT '+thisUpperRange+'  FROM '+thisNormalRanges+';'
    #print(MySQL)
    sql_query = pd.read_sql_query (MySQL, conn)
    df2 = pd.DataFrame(sql_query, columns = [thisUpperRange])
    df2=df2.dropna()
    #print(df2)

    UpperRange = df2[thisUpperRange][0]
    print("Upper range: " + str(UpperRange))

    #print('Column names:')
    #for col in sql_query.columns:
    #    print(col)

    #maxi=int(df.max())
    #print('Max: ')
    #print(maxi)

    MySQL = 'SELECT '+thisAnalyte+'  FROM '+thisTable+' WHERE '+thisAnalyte+'<='+str(UpperRange)+';'
    #MySQL = 'SELECT '+thisAnalyte+'  FROM '+thisTable+';'
    sql_query = pd.read_sql_query (MySQL, conn)
    #print(MySQL+': ')
    df = pd.DataFrame(sql_query, columns = [thisAnalyte]) 
    df=df.dropna()
    #print(df)

    #raise ValueError()
    #cutoff=cutoff_factor*maxi
    #print('cutoff:')
    #print(cutoff)
    #maxi=cutoff
    maxi=UpperRange

    step=maxi/1000
    midpts=[]
    for i in range(1,1001):
        midpts.append(step*i) # [i]=step*i
    #print('midpts:')
    #print(midpts)

    df['bins'] = pd.cut(x=df[thisAnalyte], bins=midpts) #, labels=binLabels)
    #print('Dataframe:')
    #print(df)

    #print("BinCounts: ") 
    binCounts=df['bins'].value_counts(sort=False)
    binCounts.columns =['bin', 'Count']
    #print(binCounts)

    counts=[]
    counts=binCounts.values.tolist()
    #print('counts:')
    #print(counts)

    nGraph += 1
    xvals = np.array(midpts[:998])
    yvals = np.array(counts[:998])
    plt.figure(nGraph)
    plt.title("Histogram")
    plt.xlabel('bins')
    plt.ylabel('counts')

    plt.plot(xvals,yvals,marker='o', label=thisAnalyte)
    plt.legend(loc="upper right")

    #popt, pcov = curve_fit(func, xvals, yvals)
    #print('A   is '+str(popt[0]))
    #print('x0  is '+str(popt[1]))
    #print('sig is '+str(popt[2]))
    #print(popt)
    #print(pcov)
    #yfit = []
    #for x in xvals:
    #    yfit.append(func(x, popt[0], popt[1], popt[2]))
    #plt.plot(xvals,yfit,marker='.', label='Gaussian')

    cumulativeSum=df['bins'].value_counts(sort=False).cumsum()
    #print('cumulativeSum:')
    numpySum=cumulativeSum.to_numpy()
    maxsum = numpySum.max()
    #print('maxsum: '+str(maxsum))

    numpySum=numpySum/maxsum
    #print(cumulativeSum)
    #print(numpySum)

    minus3SD=0.0015
    minus2SD=0.025
    minus1SD=0.16
    plus1SD=0.84
    plus2SD=0.975
    plus3SD=0.9985
    
    def find_cutoff(centile, CumulativeSums, MaxSum, xvals):
        i=0
        print('centile; '+str(centile))
        while CumulativeSums[i]<centile:
            i+=1
        if i==0:
            return 0
        else:
            #return xvals[i]
            thisSum = CumulativeSums[i]
            previousSum = CumulativeSums[i-1]
            fractionAbove = (centile-previousSum)/(thisSum-previousSum)
            thisConc = xvals[i]
            previousConc = xvals[i-1]
            interpolatedConc = previousConc + fractionAbove*(thisConc-previousConc)
            return interpolatedConc
           
    ConcMinus3SD = find_cutoff(minus3SD,numpySum, maxi, xvals)
    print("minus3SD: " + str(ConcMinus3SD) )
    ConcMinus2SD = find_cutoff(minus2SD, numpySum, maxi, xvals)
    print("minus2SD: " + str(ConcMinus2SD))
    ConcMinus1SD = find_cutoff(minus1SD, numpySum, maxi, xvals)
    print("minus1SD: " + str(ConcMinus1SD) )
    ConcPlus1SD = find_cutoff(plus1SD, numpySum, maxi, xvals)
    print("plus1SD: " + str(ConcPlus1SD) )
    ConcPlus2SD = find_cutoff(plus2SD, numpySum, maxi, xvals)
    print("plus2SD: " + str(ConcPlus2SD) )
    ConcPlus3SD = find_cutoff(plus3SD, numpySum, maxi, xvals)
    print("plus3SD: " + str(ConcPlus3SD) )

    nGraph += 1
    plt.figure(nGraph)
    plt.title('Cumulative Sum') 
    plt.xlabel('Conc') 
    plt.ylabel('Fractional Cumulative Sum') 

    #plt.plot(cumulativeSum,marker='x')
    xaxis=midpts[:999]
    plt.plot(xaxis,numpySum,marker='x', label=thisAnalyte)
    yMinus3SD=[]
    yMinus2SD=[]
    yMinus1SD=[]
    yPlus1SD=[]
    yPlus2SD=[]
    yPlus3SD=[]
    for i in range(999):
        yMinus3SD.append(minus3SD)
        yMinus2SD.append(minus2SD)
        yMinus1SD.append(minus1SD)
        yPlus1SD.append(plus1SD)
        yPlus2SD.append(plus2SD)
        yPlus3SD.append(plus3SD)
    plt.plot(xaxis,yMinus3SD,marker='_', label='-3SD='+str(round(ConcMinus3SD,2)))
    plt.plot(xaxis,yMinus2SD,marker='_', label='-2SD='+str(round(ConcMinus2SD,2)))
    plt.plot(xaxis,yMinus1SD,marker='_', label='-1SD='+str(round(ConcMinus1SD,2)))
    plt.plot(xaxis,yPlus1SD,marker='_', label='+1SD='+str(round(ConcPlus1SD,2)))
    plt.plot(xaxis,yPlus2SD,marker='_', label='+2SD='+str(round(ConcPlus2SD,2)))
    plt.plot(xaxis,yPlus3SD,marker='_', label='+3SD='+str(round(ConcPlus3SD,2)))
    plt.legend(loc="right")

